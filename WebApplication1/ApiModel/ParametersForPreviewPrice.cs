/* 
 * Allegro REST API
 *
 * https://developer.allegro.pl/about
 *
 * OpenAPI spec version: latest
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace WebApplication1.ApiModel
{
    /// <summary>
    /// ParametersForPreviewPrice
    /// </summary>
    [DataContract]
        public partial class ParametersForPreviewPrice :  IEquatable<ParametersForPreviewPrice>, IValidatableObject
    {
        /// <summary>
        /// Offer condition, if is new, used or other.
        /// </summary>
        /// <value>Offer condition, if is new, used or other.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ConditionEnum
        {
            /// <summary>
            /// Enum NEW for value: NEW
            /// </summary>
            [EnumMember(Value = "NEW")]
            NEW = 0,
            /// <summary>
            /// Enum USED for value: USED
            /// </summary>
            [EnumMember(Value = "USED")]
            USED = 1,
            /// <summary>
            /// Enum OTHER for value: OTHER
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHER = 2        }
        /// <summary>
        /// Offer condition, if is new, used or other.
        /// </summary>
        /// <value>Offer condition, if is new, used or other.</value>
        [DataMember(Name="condition", EmitDefaultValue=false)]
        public ConditionEnum? Condition { get; set; }
        /// <summary>
        /// Defines Duration
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum DurationEnum
        {
            /// <summary>
            /// Enum PT72H for value: PT72H
            /// </summary>
            [EnumMember(Value = "PT72H")]
            PT72H = 0,
            /// <summary>
            /// Enum PT120H for value: PT120H
            /// </summary>
            [EnumMember(Value = "PT120H")]
            PT120H = 1,
            /// <summary>
            /// Enum PT168H for value: PT168H
            /// </summary>
            [EnumMember(Value = "PT168H")]
            PT168H = 2,
            /// <summary>
            /// Enum PT240H for value: PT240H
            /// </summary>
            [EnumMember(Value = "PT240H")]
            PT240H = 3,
            /// <summary>
            /// Enum PT336H for value: PT336H
            /// </summary>
            [EnumMember(Value = "PT336H")]
            PT336H = 4,
            /// <summary>
            /// Enum PT480H for value: PT480H
            /// </summary>
            [EnumMember(Value = "PT480H")]
            PT480H = 5,
            /// <summary>
            /// Enum PT720H for value: PT720H
            /// </summary>
            [EnumMember(Value = "PT720H")]
            PT720H = 6        }
        /// <summary>
        /// Gets or Sets Duration
        /// </summary>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public DurationEnum? Duration { get; set; }
        /// <summary>
        /// Offer type. &#x27;type&#x27; or &#x27;shop&#x27; fields must be provided. Takes precedence over &#x27;shop&#x27; field. Note: if type &#x3D; &#x27;advertisement&#x27; then either &#x27;quantity&#x27; or &#x27;soldQuantity&#x27; field must be set.
        /// </summary>
        /// <value>Offer type. &#x27;type&#x27; or &#x27;shop&#x27; fields must be provided. Takes precedence over &#x27;shop&#x27; field. Note: if type &#x3D; &#x27;advertisement&#x27; then either &#x27;quantity&#x27; or &#x27;soldQuantity&#x27; field must be set.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum Shop for value: shop
            /// </summary>
            [EnumMember(Value = "shop")]
            Shop = 0,
            /// <summary>
            /// Enum Offer for value: offer
            /// </summary>
            [EnumMember(Value = "offer")]
            Offer = 1,
            /// <summary>
            /// Enum Advertisement for value: advertisement
            /// </summary>
            [EnumMember(Value = "advertisement")]
            Advertisement = 2        }
        /// <summary>
        /// Offer type. &#x27;type&#x27; or &#x27;shop&#x27; fields must be provided. Takes precedence over &#x27;shop&#x27; field. Note: if type &#x3D; &#x27;advertisement&#x27; then either &#x27;quantity&#x27; or &#x27;soldQuantity&#x27; field must be set.
        /// </summary>
        /// <value>Offer type. &#x27;type&#x27; or &#x27;shop&#x27; fields must be provided. Takes precedence over &#x27;shop&#x27; field. Note: if type &#x3D; &#x27;advertisement&#x27; then either &#x27;quantity&#x27; or &#x27;soldQuantity&#x27; field must be set.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ParametersForPreviewPrice" /> class.
        /// </summary>
        /// <param name="category">category (required).</param>
        /// <param name="condition">Offer condition, if is new, used or other..</param>
        /// <param name="duration">duration.</param>
        /// <param name="hasAnyQuantity">hasAnyQuantity.</param>
        /// <param name="numberOfBigPhotos">If set, minimum value 0.</param>
        /// <param name="numberOfPhotos">If set, minimum value 0.</param>
        /// <param name="quantity">Quantity of items to be sold. If set, minimum value 1.</param>
        /// <param name="shop">Deprecated. Value &#x27;true&#x27; sets the &#x27;offer.type&#x27; field to &#x27;shop&#x27;, value &#x27;false&#x27; to &#x27;offer&#x27;. This field is ignored if &#x27;offer.type&#x27; field is set..</param>
        /// <param name="soldQuantity">Quantity of sold items. Relates to commission success fee. If set, minimum value 1.</param>
        /// <param name="type">Offer type. &#x27;type&#x27; or &#x27;shop&#x27; fields must be provided. Takes precedence over &#x27;shop&#x27; field. Note: if type &#x3D; &#x27;advertisement&#x27; then either &#x27;quantity&#x27; or &#x27;soldQuantity&#x27; field must be set..</param>
        /// <param name="unitPrice">unitPrice (required).</param>
        /// <param name="bold">bold.</param>
        /// <param name="highlight">highlight.</param>
        /// <param name="departmentPage">departmentPage.</param>
        /// <param name="emphasized">emphasized.</param>
        /// <param name="emphasizedHighlightBoldPackage">emphasizedHighlightBoldPackage.</param>
        /// <param name="multiVariant">multiVariant.</param>
        public ParametersForPreviewPrice(Category category = default(Category), ConditionEnum? condition = default(ConditionEnum?), DurationEnum? duration = default(DurationEnum?), bool? hasAnyQuantity = default(bool?), int? numberOfBigPhotos = default(int?), int? numberOfPhotos = default(int?), int? quantity = default(int?), bool? shop = default(bool?), int? soldQuantity = default(int?), TypeEnum? type = default(TypeEnum?), decimal? unitPrice = default(decimal?), bool? bold = default(bool?), bool? highlight = default(bool?), bool? departmentPage = default(bool?), bool? emphasized = default(bool?), bool? emphasizedHighlightBoldPackage = default(bool?), bool? multiVariant = default(bool?))
        {
            // to ensure "category" is required (not null)
            if (category == null)
            {
                throw new InvalidDataException("category is a required property for ParametersForPreviewPrice and cannot be null");
            }
            else
            {
                this.Category = category;
            }
            // to ensure "unitPrice" is required (not null)
            if (unitPrice == null)
            {
                throw new InvalidDataException("unitPrice is a required property for ParametersForPreviewPrice and cannot be null");
            }
            else
            {
                this.UnitPrice = unitPrice;
            }
            this.Condition = condition;
            this.Duration = duration;
            this.HasAnyQuantity = hasAnyQuantity;
            this.NumberOfBigPhotos = numberOfBigPhotos;
            this.NumberOfPhotos = numberOfPhotos;
            this.Quantity = quantity;
            this.Shop = shop;
            this.SoldQuantity = soldQuantity;
            this.Type = type;
            this.Bold = bold;
            this.Highlight = highlight;
            this.DepartmentPage = departmentPage;
            this.Emphasized = emphasized;
            this.EmphasizedHighlightBoldPackage = emphasizedHighlightBoldPackage;
            this.MultiVariant = multiVariant;
        }
        
        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public Category Category { get; set; }



        /// <summary>
        /// Gets or Sets HasAnyQuantity
        /// </summary>
        [DataMember(Name="hasAnyQuantity", EmitDefaultValue=false)]
        public bool? HasAnyQuantity { get; set; }

        /// <summary>
        /// If set, minimum value 0
        /// </summary>
        /// <value>If set, minimum value 0</value>
        [DataMember(Name="numberOfBigPhotos", EmitDefaultValue=false)]
        public int? NumberOfBigPhotos { get; set; }

        /// <summary>
        /// If set, minimum value 0
        /// </summary>
        /// <value>If set, minimum value 0</value>
        [DataMember(Name="numberOfPhotos", EmitDefaultValue=false)]
        public int? NumberOfPhotos { get; set; }

        /// <summary>
        /// Quantity of items to be sold. If set, minimum value 1
        /// </summary>
        /// <value>Quantity of items to be sold. If set, minimum value 1</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public int? Quantity { get; set; }

        /// <summary>
        /// Deprecated. Value &#x27;true&#x27; sets the &#x27;offer.type&#x27; field to &#x27;shop&#x27;, value &#x27;false&#x27; to &#x27;offer&#x27;. This field is ignored if &#x27;offer.type&#x27; field is set.
        /// </summary>
        /// <value>Deprecated. Value &#x27;true&#x27; sets the &#x27;offer.type&#x27; field to &#x27;shop&#x27;, value &#x27;false&#x27; to &#x27;offer&#x27;. This field is ignored if &#x27;offer.type&#x27; field is set.</value>
        [DataMember(Name="shop", EmitDefaultValue=false)]
        public bool? Shop { get; set; }

        /// <summary>
        /// Quantity of sold items. Relates to commission success fee. If set, minimum value 1
        /// </summary>
        /// <value>Quantity of sold items. Relates to commission success fee. If set, minimum value 1</value>
        [DataMember(Name="soldQuantity", EmitDefaultValue=false)]
        public int? SoldQuantity { get; set; }


        /// <summary>
        /// Gets or Sets UnitPrice
        /// </summary>
        [DataMember(Name="unitPrice", EmitDefaultValue=false)]
        public decimal? UnitPrice { get; set; }

        /// <summary>
        /// Gets or Sets Bold
        /// </summary>
        [DataMember(Name="bold", EmitDefaultValue=false)]
        public bool? Bold { get; set; }

        /// <summary>
        /// Gets or Sets Highlight
        /// </summary>
        [DataMember(Name="highlight", EmitDefaultValue=false)]
        public bool? Highlight { get; set; }

        /// <summary>
        /// Gets or Sets DepartmentPage
        /// </summary>
        [DataMember(Name="departmentPage", EmitDefaultValue=false)]
        public bool? DepartmentPage { get; set; }

        /// <summary>
        /// Gets or Sets Emphasized
        /// </summary>
        [DataMember(Name="emphasized", EmitDefaultValue=false)]
        public bool? Emphasized { get; set; }

        /// <summary>
        /// Gets or Sets EmphasizedHighlightBoldPackage
        /// </summary>
        [DataMember(Name="emphasizedHighlightBoldPackage", EmitDefaultValue=false)]
        public bool? EmphasizedHighlightBoldPackage { get; set; }

        /// <summary>
        /// Gets or Sets MultiVariant
        /// </summary>
        [DataMember(Name="multiVariant", EmitDefaultValue=false)]
        public bool? MultiVariant { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ParametersForPreviewPrice {\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  HasAnyQuantity: ").Append(HasAnyQuantity).Append("\n");
            sb.Append("  NumberOfBigPhotos: ").Append(NumberOfBigPhotos).Append("\n");
            sb.Append("  NumberOfPhotos: ").Append(NumberOfPhotos).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Shop: ").Append(Shop).Append("\n");
            sb.Append("  SoldQuantity: ").Append(SoldQuantity).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UnitPrice: ").Append(UnitPrice).Append("\n");
            sb.Append("  Bold: ").Append(Bold).Append("\n");
            sb.Append("  Highlight: ").Append(Highlight).Append("\n");
            sb.Append("  DepartmentPage: ").Append(DepartmentPage).Append("\n");
            sb.Append("  Emphasized: ").Append(Emphasized).Append("\n");
            sb.Append("  EmphasizedHighlightBoldPackage: ").Append(EmphasizedHighlightBoldPackage).Append("\n");
            sb.Append("  MultiVariant: ").Append(MultiVariant).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ParametersForPreviewPrice);
        }

        /// <summary>
        /// Returns true if ParametersForPreviewPrice instances are equal
        /// </summary>
        /// <param name="input">Instance of ParametersForPreviewPrice to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ParametersForPreviewPrice input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.Condition == input.Condition ||
                    (this.Condition != null &&
                    this.Condition.Equals(input.Condition))
                ) && 
                (
                    this.Duration == input.Duration ||
                    (this.Duration != null &&
                    this.Duration.Equals(input.Duration))
                ) && 
                (
                    this.HasAnyQuantity == input.HasAnyQuantity ||
                    (this.HasAnyQuantity != null &&
                    this.HasAnyQuantity.Equals(input.HasAnyQuantity))
                ) && 
                (
                    this.NumberOfBigPhotos == input.NumberOfBigPhotos ||
                    (this.NumberOfBigPhotos != null &&
                    this.NumberOfBigPhotos.Equals(input.NumberOfBigPhotos))
                ) && 
                (
                    this.NumberOfPhotos == input.NumberOfPhotos ||
                    (this.NumberOfPhotos != null &&
                    this.NumberOfPhotos.Equals(input.NumberOfPhotos))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.Shop == input.Shop ||
                    (this.Shop != null &&
                    this.Shop.Equals(input.Shop))
                ) && 
                (
                    this.SoldQuantity == input.SoldQuantity ||
                    (this.SoldQuantity != null &&
                    this.SoldQuantity.Equals(input.SoldQuantity))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.UnitPrice == input.UnitPrice ||
                    (this.UnitPrice != null &&
                    this.UnitPrice.Equals(input.UnitPrice))
                ) && 
                (
                    this.Bold == input.Bold ||
                    (this.Bold != null &&
                    this.Bold.Equals(input.Bold))
                ) && 
                (
                    this.Highlight == input.Highlight ||
                    (this.Highlight != null &&
                    this.Highlight.Equals(input.Highlight))
                ) && 
                (
                    this.DepartmentPage == input.DepartmentPage ||
                    (this.DepartmentPage != null &&
                    this.DepartmentPage.Equals(input.DepartmentPage))
                ) && 
                (
                    this.Emphasized == input.Emphasized ||
                    (this.Emphasized != null &&
                    this.Emphasized.Equals(input.Emphasized))
                ) && 
                (
                    this.EmphasizedHighlightBoldPackage == input.EmphasizedHighlightBoldPackage ||
                    (this.EmphasizedHighlightBoldPackage != null &&
                    this.EmphasizedHighlightBoldPackage.Equals(input.EmphasizedHighlightBoldPackage))
                ) && 
                (
                    this.MultiVariant == input.MultiVariant ||
                    (this.MultiVariant != null &&
                    this.MultiVariant.Equals(input.MultiVariant))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.Condition != null)
                    hashCode = hashCode * 59 + this.Condition.GetHashCode();
                if (this.Duration != null)
                    hashCode = hashCode * 59 + this.Duration.GetHashCode();
                if (this.HasAnyQuantity != null)
                    hashCode = hashCode * 59 + this.HasAnyQuantity.GetHashCode();
                if (this.NumberOfBigPhotos != null)
                    hashCode = hashCode * 59 + this.NumberOfBigPhotos.GetHashCode();
                if (this.NumberOfPhotos != null)
                    hashCode = hashCode * 59 + this.NumberOfPhotos.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.Shop != null)
                    hashCode = hashCode * 59 + this.Shop.GetHashCode();
                if (this.SoldQuantity != null)
                    hashCode = hashCode * 59 + this.SoldQuantity.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.UnitPrice != null)
                    hashCode = hashCode * 59 + this.UnitPrice.GetHashCode();
                if (this.Bold != null)
                    hashCode = hashCode * 59 + this.Bold.GetHashCode();
                if (this.Highlight != null)
                    hashCode = hashCode * 59 + this.Highlight.GetHashCode();
                if (this.DepartmentPage != null)
                    hashCode = hashCode * 59 + this.DepartmentPage.GetHashCode();
                if (this.Emphasized != null)
                    hashCode = hashCode * 59 + this.Emphasized.GetHashCode();
                if (this.EmphasizedHighlightBoldPackage != null)
                    hashCode = hashCode * 59 + this.EmphasizedHighlightBoldPackage.GetHashCode();
                if (this.MultiVariant != null)
                    hashCode = hashCode * 59 + this.MultiVariant.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
