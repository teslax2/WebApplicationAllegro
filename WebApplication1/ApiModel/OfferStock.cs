/* 
 * Allegro REST API
 *
 * https://developer.allegro.pl/about
 *
 * OpenAPI spec version: latest
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace WebApplication1.ApiModel
{
    /// <summary>
    /// Information about the stock.
    /// </summary>
    [DataContract]
        public partial class OfferStock :  IEquatable<OfferStock>, IValidatableObject
    {
        /// <summary>
        /// The unit type of the stock.
        /// </summary>
        /// <value>The unit type of the stock.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum UnitEnum
        {
            /// <summary>
            /// Enum UNIT for value: UNIT
            /// </summary>
            [EnumMember(Value = "UNIT")]
            UNIT = 0,
            /// <summary>
            /// Enum PAIR for value: PAIR
            /// </summary>
            [EnumMember(Value = "PAIR")]
            PAIR = 1,
            /// <summary>
            /// Enum SET for value: SET
            /// </summary>
            [EnumMember(Value = "SET")]
            SET = 2        }
        /// <summary>
        /// The unit type of the stock.
        /// </summary>
        /// <value>The unit type of the stock.</value>
        [DataMember(Name="unit", EmitDefaultValue=false)]
        public UnitEnum? Unit { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OfferStock" /> class.
        /// </summary>
        /// <param name="unit">The unit type of the stock..</param>
        /// <param name="available">The available stock value..</param>
        public OfferStock(UnitEnum? unit = default(UnitEnum?), int? available = default(int?))
        {
            this.Unit = unit;
            this.Available = available;
        }
        

        /// <summary>
        /// The available stock value.
        /// </summary>
        /// <value>The available stock value.</value>
        [DataMember(Name="available", EmitDefaultValue=false)]
        public int? Available { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OfferStock {\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  Available: ").Append(Available).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OfferStock);
        }

        /// <summary>
        /// Returns true if OfferStock instances are equal
        /// </summary>
        /// <param name="input">Instance of OfferStock to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OfferStock input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Unit == input.Unit ||
                    (this.Unit != null &&
                    this.Unit.Equals(input.Unit))
                ) && 
                (
                    this.Available == input.Available ||
                    (this.Available != null &&
                    this.Available.Equals(input.Available))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Unit != null)
                    hashCode = hashCode * 59 + this.Unit.GetHashCode();
                if (this.Available != null)
                    hashCode = hashCode * 59 + this.Available.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
