/* 
 * Allegro REST API
 *
 * https://developer.allegro.pl/about
 *
 * OpenAPI spec version: latest
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace WebApplication1.ApiModel
{
    /// <summary>
    /// ConstraintCriteria
    /// </summary>
    [DataContract]
        public partial class ConstraintCriteria :  IEquatable<ConstraintCriteria>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum SAMEQUANTITY for value: COUNTRY_SAME_QUANTITY
            /// </summary>
            [EnumMember(Value = "COUNTRY_SAME_QUANTITY")]
            SAMEQUANTITY = 0,
            /// <summary>
            /// Enum DELIVERYSAMEQUANTITY for value: COUNTRY_DELIVERY_SAME_QUANTITY
            /// </summary>
            [EnumMember(Value = "COUNTRY_DELIVERY_SAME_QUANTITY")]
            DELIVERYSAMEQUANTITY = 1        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConstraintCriteria" /> class.
        /// </summary>
        /// <param name="country">country.</param>
        /// <param name="type">type.</param>
        /// <param name="deliveryMethods">deliveryMethods.</param>
        public ConstraintCriteria(string country = default(string), TypeEnum? type = default(TypeEnum?), List<JustId> deliveryMethods = default(List<JustId>))
        {
            this.Country = country;
            this.Type = type;
            this.DeliveryMethods = deliveryMethods;
        }
        
        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }


        /// <summary>
        /// Gets or Sets DeliveryMethods
        /// </summary>
        [DataMember(Name="deliveryMethods", EmitDefaultValue=false)]
        public List<JustId> DeliveryMethods { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConstraintCriteria {\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  DeliveryMethods: ").Append(DeliveryMethods).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConstraintCriteria);
        }

        /// <summary>
        /// Returns true if ConstraintCriteria instances are equal
        /// </summary>
        /// <param name="input">Instance of ConstraintCriteria to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConstraintCriteria input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.DeliveryMethods == input.DeliveryMethods ||
                    this.DeliveryMethods != null &&
                    input.DeliveryMethods != null &&
                    this.DeliveryMethods.SequenceEqual(input.DeliveryMethods)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.DeliveryMethods != null)
                    hashCode = hashCode * 59 + this.DeliveryMethods.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
