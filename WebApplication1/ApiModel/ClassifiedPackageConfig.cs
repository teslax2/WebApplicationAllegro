/* 
 * Allegro REST API
 *
 * https://developer.allegro.pl/about
 *
 * OpenAPI spec version: latest
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace WebApplication1.ApiModel
{
    /// <summary>
    /// ClassifiedPackageConfig
    /// </summary>
    [DataContract]
        public partial class ClassifiedPackageConfig :  IEquatable<ClassifiedPackageConfig>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum BASE for value: BASE
            /// </summary>
            [EnumMember(Value = "BASE")]
            BASE = 0,
            /// <summary>
            /// Enum EXTRA for value: EXTRA
            /// </summary>
            [EnumMember(Value = "EXTRA")]
            EXTRA = 1        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ClassifiedPackageConfig" /> class.
        /// </summary>
        /// <param name="extensions">extensions.</param>
        /// <param name="id">The classifieds package ID. (required).</param>
        /// <param name="name">The classifieds package name. (required).</param>
        /// <param name="promotions">A list of additional promotions included in the package..</param>
        /// <param name="publication">publication.</param>
        /// <param name="type">type (required).</param>
        public ClassifiedPackageConfig(List<ClassifiedExtension> extensions = default(List<ClassifiedExtension>), string id = default(string), string name = default(string), List<ClassifiedPromotion> promotions = default(List<ClassifiedPromotion>), ClassifiedPublication publication = default(ClassifiedPublication), TypeEnum type = default(TypeEnum))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for ClassifiedPackageConfig and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for ClassifiedPackageConfig and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for ClassifiedPackageConfig and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.Extensions = extensions;
            this.Promotions = promotions;
            this.Publication = publication;
        }
        
        /// <summary>
        /// Gets or Sets Extensions
        /// </summary>
        [DataMember(Name="extensions", EmitDefaultValue=false)]
        public List<ClassifiedExtension> Extensions { get; set; }

        /// <summary>
        /// The classifieds package ID.
        /// </summary>
        /// <value>The classifieds package ID.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The classifieds package name.
        /// </summary>
        /// <value>The classifieds package name.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// A list of additional promotions included in the package.
        /// </summary>
        /// <value>A list of additional promotions included in the package.</value>
        [DataMember(Name="promotions", EmitDefaultValue=false)]
        public List<ClassifiedPromotion> Promotions { get; set; }

        /// <summary>
        /// Gets or Sets Publication
        /// </summary>
        [DataMember(Name="publication", EmitDefaultValue=false)]
        public ClassifiedPublication Publication { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ClassifiedPackageConfig {\n");
            sb.Append("  Extensions: ").Append(Extensions).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Promotions: ").Append(Promotions).Append("\n");
            sb.Append("  Publication: ").Append(Publication).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ClassifiedPackageConfig);
        }

        /// <summary>
        /// Returns true if ClassifiedPackageConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of ClassifiedPackageConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClassifiedPackageConfig input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Extensions == input.Extensions ||
                    this.Extensions != null &&
                    input.Extensions != null &&
                    this.Extensions.SequenceEqual(input.Extensions)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Promotions == input.Promotions ||
                    this.Promotions != null &&
                    input.Promotions != null &&
                    this.Promotions.SequenceEqual(input.Promotions)
                ) && 
                (
                    this.Publication == input.Publication ||
                    (this.Publication != null &&
                    this.Publication.Equals(input.Publication))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Extensions != null)
                    hashCode = hashCode * 59 + this.Extensions.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Promotions != null)
                    hashCode = hashCode * 59 + this.Promotions.GetHashCode();
                if (this.Publication != null)
                    hashCode = hashCode * 59 + this.Publication.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
