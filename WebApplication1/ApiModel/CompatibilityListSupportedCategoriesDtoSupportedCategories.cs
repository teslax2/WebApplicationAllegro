/* 
 * Allegro REST API
 *
 * https://developer.allegro.pl/about
 *
 * OpenAPI spec version: latest
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace WebApplication1.ApiModel
{
    /// <summary>
    /// CompatibilityListSupportedCategoriesDtoSupportedCategories
    /// </summary>
    [DataContract]
        public partial class CompatibilityListSupportedCategoriesDtoSupportedCategories :  IEquatable<CompatibilityListSupportedCategoriesDtoSupportedCategories>, IValidatableObject
    {
        /// <summary>
        /// Type of the representation of compatible item. &lt;ul&gt; &lt;li&gt;&#x60;TEXT&#x60; - item on compatibility list has to be provided as plain text.&lt;/li&gt; &lt;li&gt;&#x60;ID&#x60; - item on compatibility list has to be provided as identifier of compatible product. To obtain it please use &lt;a href&#x3D;\&quot;/documentation/#tag/Compatibility-List/paths/~1sale~1compatible-products/get\&quot;&gt;compatible-products&lt;/a&gt; resource together with &#x60;itemsType&#x60; supported in particular category. &lt;/li&gt; &lt;/ul&gt; 
        /// </summary>
        /// <value>Type of the representation of compatible item. &lt;ul&gt; &lt;li&gt;&#x60;TEXT&#x60; - item on compatibility list has to be provided as plain text.&lt;/li&gt; &lt;li&gt;&#x60;ID&#x60; - item on compatibility list has to be provided as identifier of compatible product. To obtain it please use &lt;a href&#x3D;\&quot;/documentation/#tag/Compatibility-List/paths/~1sale~1compatible-products/get\&quot;&gt;compatible-products&lt;/a&gt; resource together with &#x60;itemsType&#x60; supported in particular category. &lt;/li&gt; &lt;/ul&gt; </value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum InputTypeEnum
        {
            /// <summary>
            /// Enum TEXT for value: TEXT
            /// </summary>
            [EnumMember(Value = "TEXT")]
            TEXT = 0,
            /// <summary>
            /// Enum ID for value: ID
            /// </summary>
            [EnumMember(Value = "ID")]
            ID = 1        }
        /// <summary>
        /// Type of the representation of compatible item. &lt;ul&gt; &lt;li&gt;&#x60;TEXT&#x60; - item on compatibility list has to be provided as plain text.&lt;/li&gt; &lt;li&gt;&#x60;ID&#x60; - item on compatibility list has to be provided as identifier of compatible product. To obtain it please use &lt;a href&#x3D;\&quot;/documentation/#tag/Compatibility-List/paths/~1sale~1compatible-products/get\&quot;&gt;compatible-products&lt;/a&gt; resource together with &#x60;itemsType&#x60; supported in particular category. &lt;/li&gt; &lt;/ul&gt; 
        /// </summary>
        /// <value>Type of the representation of compatible item. &lt;ul&gt; &lt;li&gt;&#x60;TEXT&#x60; - item on compatibility list has to be provided as plain text.&lt;/li&gt; &lt;li&gt;&#x60;ID&#x60; - item on compatibility list has to be provided as identifier of compatible product. To obtain it please use &lt;a href&#x3D;\&quot;/documentation/#tag/Compatibility-List/paths/~1sale~1compatible-products/get\&quot;&gt;compatible-products&lt;/a&gt; resource together with &#x60;itemsType&#x60; supported in particular category. &lt;/li&gt; &lt;/ul&gt; </value>
        [DataMember(Name="inputType", EmitDefaultValue=false)]
        public InputTypeEnum? InputType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CompatibilityListSupportedCategoriesDtoSupportedCategories" /> class.
        /// </summary>
        /// <param name="categoryId">Identifier of the category, where you can use the compatibility list in an offer listed in the category or in all subcategories, which belongs to returned category..</param>
        /// <param name="name">Name of supported category..</param>
        /// <param name="itemsType">Type of the compatible item..</param>
        /// <param name="inputType">Type of the representation of compatible item. &lt;ul&gt; &lt;li&gt;&#x60;TEXT&#x60; - item on compatibility list has to be provided as plain text.&lt;/li&gt; &lt;li&gt;&#x60;ID&#x60; - item on compatibility list has to be provided as identifier of compatible product. To obtain it please use &lt;a href&#x3D;\&quot;/documentation/#tag/Compatibility-List/paths/~1sale~1compatible-products/get\&quot;&gt;compatible-products&lt;/a&gt; resource together with &#x60;itemsType&#x60; supported in particular category. &lt;/li&gt; &lt;/ul&gt; .</param>
        /// <param name="validationRules">validationRules.</param>
        public CompatibilityListSupportedCategoriesDtoSupportedCategories(string categoryId = default(string), string name = default(string), string itemsType = default(string), InputTypeEnum? inputType = default(InputTypeEnum?), CompatibilityListSupportedCategoriesDtoValidationRules validationRules = default(CompatibilityListSupportedCategoriesDtoValidationRules))
        {
            this.CategoryId = categoryId;
            this.Name = name;
            this.ItemsType = itemsType;
            this.InputType = inputType;
            this.ValidationRules = validationRules;
        }
        
        /// <summary>
        /// Identifier of the category, where you can use the compatibility list in an offer listed in the category or in all subcategories, which belongs to returned category.
        /// </summary>
        /// <value>Identifier of the category, where you can use the compatibility list in an offer listed in the category or in all subcategories, which belongs to returned category.</value>
        [DataMember(Name="categoryId", EmitDefaultValue=false)]
        public string CategoryId { get; set; }

        /// <summary>
        /// Name of supported category.
        /// </summary>
        /// <value>Name of supported category.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Type of the compatible item.
        /// </summary>
        /// <value>Type of the compatible item.</value>
        [DataMember(Name="itemsType", EmitDefaultValue=false)]
        public string ItemsType { get; set; }


        /// <summary>
        /// Gets or Sets ValidationRules
        /// </summary>
        [DataMember(Name="validationRules", EmitDefaultValue=false)]
        public CompatibilityListSupportedCategoriesDtoValidationRules ValidationRules { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CompatibilityListSupportedCategoriesDtoSupportedCategories {\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ItemsType: ").Append(ItemsType).Append("\n");
            sb.Append("  InputType: ").Append(InputType).Append("\n");
            sb.Append("  ValidationRules: ").Append(ValidationRules).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompatibilityListSupportedCategoriesDtoSupportedCategories);
        }

        /// <summary>
        /// Returns true if CompatibilityListSupportedCategoriesDtoSupportedCategories instances are equal
        /// </summary>
        /// <param name="input">Instance of CompatibilityListSupportedCategoriesDtoSupportedCategories to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompatibilityListSupportedCategoriesDtoSupportedCategories input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CategoryId == input.CategoryId ||
                    (this.CategoryId != null &&
                    this.CategoryId.Equals(input.CategoryId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ItemsType == input.ItemsType ||
                    (this.ItemsType != null &&
                    this.ItemsType.Equals(input.ItemsType))
                ) && 
                (
                    this.InputType == input.InputType ||
                    (this.InputType != null &&
                    this.InputType.Equals(input.InputType))
                ) && 
                (
                    this.ValidationRules == input.ValidationRules ||
                    (this.ValidationRules != null &&
                    this.ValidationRules.Equals(input.ValidationRules))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CategoryId != null)
                    hashCode = hashCode * 59 + this.CategoryId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ItemsType != null)
                    hashCode = hashCode * 59 + this.ItemsType.GetHashCode();
                if (this.InputType != null)
                    hashCode = hashCode * 59 + this.InputType.GetHashCode();
                if (this.ValidationRules != null)
                    hashCode = hashCode * 59 + this.ValidationRules.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
