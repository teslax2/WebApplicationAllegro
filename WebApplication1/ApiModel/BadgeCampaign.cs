/* 
 * Allegro REST API
 *
 * https://developer.allegro.pl/about
 *
 * OpenAPI spec version: latest
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace WebApplication1.ApiModel
{
    /// <summary>
    /// BadgeCampaign
    /// </summary>
    [DataContract]
        public partial class BadgeCampaign :  IEquatable<BadgeCampaign>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum DISCOUNT for value: DISCOUNT
            /// </summary>
            [EnumMember(Value = "DISCOUNT")]
            DISCOUNT = 0,
            /// <summary>
            /// Enum STANDARD for value: STANDARD
            /// </summary>
            [EnumMember(Value = "STANDARD")]
            STANDARD = 1,
            /// <summary>
            /// Enum SOURCING for value: SOURCING
            /// </summary>
            [EnumMember(Value = "SOURCING")]
            SOURCING = 2        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BadgeCampaign" /> class.
        /// </summary>
        /// <param name="id">Badge campaign ID. (required).</param>
        /// <param name="name">Badge campaign name. (required).</param>
        /// <param name="type">type (required).</param>
        /// <param name="eligibility">eligibility (required).</param>
        /// <param name="application">application (required).</param>
        /// <param name="visibility">visibility (required).</param>
        /// <param name="publication">publication (required).</param>
        public BadgeCampaign(string id = default(string), string name = default(string), TypeEnum type = default(TypeEnum), UserCampaignEligibility eligibility = default(UserCampaignEligibility), ApplicationTimePolicy application = default(ApplicationTimePolicy), VisibilityTimePolicy visibility = default(VisibilityTimePolicy), PublicationTimePolicy publication = default(PublicationTimePolicy))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for BadgeCampaign and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for BadgeCampaign and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for BadgeCampaign and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "eligibility" is required (not null)
            if (eligibility == null)
            {
                throw new InvalidDataException("eligibility is a required property for BadgeCampaign and cannot be null");
            }
            else
            {
                this.Eligibility = eligibility;
            }
            // to ensure "application" is required (not null)
            if (application == null)
            {
                throw new InvalidDataException("application is a required property for BadgeCampaign and cannot be null");
            }
            else
            {
                this.Application = application;
            }
            // to ensure "visibility" is required (not null)
            if (visibility == null)
            {
                throw new InvalidDataException("visibility is a required property for BadgeCampaign and cannot be null");
            }
            else
            {
                this.Visibility = visibility;
            }
            // to ensure "publication" is required (not null)
            if (publication == null)
            {
                throw new InvalidDataException("publication is a required property for BadgeCampaign and cannot be null");
            }
            else
            {
                this.Publication = publication;
            }
        }
        
        /// <summary>
        /// Badge campaign ID.
        /// </summary>
        /// <value>Badge campaign ID.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Badge campaign name.
        /// </summary>
        /// <value>Badge campaign name.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }


        /// <summary>
        /// Gets or Sets Eligibility
        /// </summary>
        [DataMember(Name="eligibility", EmitDefaultValue=false)]
        public UserCampaignEligibility Eligibility { get; set; }

        /// <summary>
        /// Gets or Sets Application
        /// </summary>
        [DataMember(Name="application", EmitDefaultValue=false)]
        public ApplicationTimePolicy Application { get; set; }

        /// <summary>
        /// Gets or Sets Visibility
        /// </summary>
        [DataMember(Name="visibility", EmitDefaultValue=false)]
        public VisibilityTimePolicy Visibility { get; set; }

        /// <summary>
        /// Gets or Sets Publication
        /// </summary>
        [DataMember(Name="publication", EmitDefaultValue=false)]
        public PublicationTimePolicy Publication { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BadgeCampaign {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Eligibility: ").Append(Eligibility).Append("\n");
            sb.Append("  Application: ").Append(Application).Append("\n");
            sb.Append("  Visibility: ").Append(Visibility).Append("\n");
            sb.Append("  Publication: ").Append(Publication).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BadgeCampaign);
        }

        /// <summary>
        /// Returns true if BadgeCampaign instances are equal
        /// </summary>
        /// <param name="input">Instance of BadgeCampaign to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BadgeCampaign input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Eligibility == input.Eligibility ||
                    (this.Eligibility != null &&
                    this.Eligibility.Equals(input.Eligibility))
                ) && 
                (
                    this.Application == input.Application ||
                    (this.Application != null &&
                    this.Application.Equals(input.Application))
                ) && 
                (
                    this.Visibility == input.Visibility ||
                    (this.Visibility != null &&
                    this.Visibility.Equals(input.Visibility))
                ) && 
                (
                    this.Publication == input.Publication ||
                    (this.Publication != null &&
                    this.Publication.Equals(input.Publication))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Eligibility != null)
                    hashCode = hashCode * 59 + this.Eligibility.GetHashCode();
                if (this.Application != null)
                    hashCode = hashCode * 59 + this.Application.GetHashCode();
                if (this.Visibility != null)
                    hashCode = hashCode * 59 + this.Visibility.GetHashCode();
                if (this.Publication != null)
                    hashCode = hashCode * 59 + this.Publication.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
