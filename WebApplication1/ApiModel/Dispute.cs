/* 
 * Allegro REST API
 *
 * https://developer.allegro.pl/about
 *
 * OpenAPI spec version: latest
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace WebApplication1.ApiModel
{
    /// <summary>
    /// Dispute
    /// </summary>
    [DataContract]
        public partial class Dispute :  IEquatable<Dispute>, IValidatableObject
    {
        /// <summary>
        /// Defines Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StatusEnum
        {
            /// <summary>
            /// Enum CLOSED for value: CLOSED
            /// </summary>
            [EnumMember(Value = "CLOSED")]
            CLOSED = 0,
            /// <summary>
            /// Enum ONGOING for value: ONGOING
            /// </summary>
            [EnumMember(Value = "ONGOING")]
            ONGOING = 1,
            /// <summary>
            /// Enum UNRESOLVED for value: UNRESOLVED
            /// </summary>
            [EnumMember(Value = "UNRESOLVED")]
            UNRESOLVED = 2        }
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Dispute" /> class.
        /// </summary>
        /// <param name="id">Identifier of the dispute (required).</param>
        /// <param name="subject">subject (required).</param>
        /// <param name="status">status (required).</param>
        /// <param name="buyer">buyer (required).</param>
        /// <param name="seller">seller (required).</param>
        /// <param name="checkoutForm">checkoutForm (required).</param>
        /// <param name="message">message (required).</param>
        /// <param name="messagesCount">messagesCount (required).</param>
        public Dispute(string id = default(string), Subject subject = default(Subject), StatusEnum status = default(StatusEnum), DisputeUser buyer = default(DisputeUser), DisputeUser seller = default(DisputeUser), DisputeCheckoutForm checkoutForm = default(DisputeCheckoutForm), DisputeFirstMessage message = default(DisputeFirstMessage), int? messagesCount = default(int?))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for Dispute and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "subject" is required (not null)
            if (subject == null)
            {
                throw new InvalidDataException("subject is a required property for Dispute and cannot be null");
            }
            else
            {
                this.Subject = subject;
            }
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for Dispute and cannot be null");
            }
            else
            {
                this.Status = status;
            }
            // to ensure "buyer" is required (not null)
            if (buyer == null)
            {
                throw new InvalidDataException("buyer is a required property for Dispute and cannot be null");
            }
            else
            {
                this.Buyer = buyer;
            }
            // to ensure "seller" is required (not null)
            if (seller == null)
            {
                throw new InvalidDataException("seller is a required property for Dispute and cannot be null");
            }
            else
            {
                this.Seller = seller;
            }
            // to ensure "checkoutForm" is required (not null)
            if (checkoutForm == null)
            {
                throw new InvalidDataException("checkoutForm is a required property for Dispute and cannot be null");
            }
            else
            {
                this.CheckoutForm = checkoutForm;
            }
            // to ensure "message" is required (not null)
            if (message == null)
            {
                throw new InvalidDataException("message is a required property for Dispute and cannot be null");
            }
            else
            {
                this.Message = message;
            }
            // to ensure "messagesCount" is required (not null)
            if (messagesCount == null)
            {
                throw new InvalidDataException("messagesCount is a required property for Dispute and cannot be null");
            }
            else
            {
                this.MessagesCount = messagesCount;
            }
        }
        
        /// <summary>
        /// Identifier of the dispute
        /// </summary>
        /// <value>Identifier of the dispute</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        [DataMember(Name="subject", EmitDefaultValue=false)]
        public Subject Subject { get; set; }


        /// <summary>
        /// Gets or Sets Buyer
        /// </summary>
        [DataMember(Name="buyer", EmitDefaultValue=false)]
        public DisputeUser Buyer { get; set; }

        /// <summary>
        /// Gets or Sets Seller
        /// </summary>
        [DataMember(Name="seller", EmitDefaultValue=false)]
        public DisputeUser Seller { get; set; }

        /// <summary>
        /// Gets or Sets CheckoutForm
        /// </summary>
        [DataMember(Name="checkoutForm", EmitDefaultValue=false)]
        public DisputeCheckoutForm CheckoutForm { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public DisputeFirstMessage Message { get; set; }

        /// <summary>
        /// Gets or Sets MessagesCount
        /// </summary>
        [DataMember(Name="messagesCount", EmitDefaultValue=false)]
        public int? MessagesCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Dispute {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Buyer: ").Append(Buyer).Append("\n");
            sb.Append("  Seller: ").Append(Seller).Append("\n");
            sb.Append("  CheckoutForm: ").Append(CheckoutForm).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  MessagesCount: ").Append(MessagesCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Dispute);
        }

        /// <summary>
        /// Returns true if Dispute instances are equal
        /// </summary>
        /// <param name="input">Instance of Dispute to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Dispute input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Buyer == input.Buyer ||
                    (this.Buyer != null &&
                    this.Buyer.Equals(input.Buyer))
                ) && 
                (
                    this.Seller == input.Seller ||
                    (this.Seller != null &&
                    this.Seller.Equals(input.Seller))
                ) && 
                (
                    this.CheckoutForm == input.CheckoutForm ||
                    (this.CheckoutForm != null &&
                    this.CheckoutForm.Equals(input.CheckoutForm))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.MessagesCount == input.MessagesCount ||
                    (this.MessagesCount != null &&
                    this.MessagesCount.Equals(input.MessagesCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Subject != null)
                    hashCode = hashCode * 59 + this.Subject.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Buyer != null)
                    hashCode = hashCode * 59 + this.Buyer.GetHashCode();
                if (this.Seller != null)
                    hashCode = hashCode * 59 + this.Seller.GetHashCode();
                if (this.CheckoutForm != null)
                    hashCode = hashCode * 59 + this.CheckoutForm.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.MessagesCount != null)
                    hashCode = hashCode * 59 + this.MessagesCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
