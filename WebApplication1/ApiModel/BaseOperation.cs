/* 
 * Allegro REST API
 *
 * https://developer.allegro.pl/about
 *
 * OpenAPI spec version: latest
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace WebApplication1.ApiModel
{
    /// <summary>
    /// BaseOperation
    /// </summary>
    [DataContract]
        public partial class BaseOperation :  IEquatable<BaseOperation>, IValidatableObject
    {
        /// <summary>
        /// The group to which the given operation type belongs.
        /// </summary>
        /// <value>The group to which the given operation type belongs.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum GroupEnum
        {
            /// <summary>
            /// Enum INCOME for value: INCOME
            /// </summary>
            [EnumMember(Value = "INCOME")]
            INCOME = 0,
            /// <summary>
            /// Enum OUTCOME for value: OUTCOME
            /// </summary>
            [EnumMember(Value = "OUTCOME")]
            OUTCOME = 1,
            /// <summary>
            /// Enum REFUND for value: REFUND
            /// </summary>
            [EnumMember(Value = "REFUND")]
            REFUND = 2        }
        /// <summary>
        /// The group to which the given operation type belongs.
        /// </summary>
        /// <value>The group to which the given operation type belongs.</value>
        [DataMember(Name="group", EmitDefaultValue=false)]
        public GroupEnum Group { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BaseOperation" /> class.
        /// </summary>
        /// <param name="type">Type of the operation. (required).</param>
        /// <param name="group">The group to which the given operation type belongs. (required).</param>
        /// <param name="wallet">wallet (required).</param>
        /// <param name="value">value (required).</param>
        /// <param name="occurredAt">Date and time of the operation in ISO 8601 format. (required).</param>
        public BaseOperation(string type = default(string), GroupEnum group = default(GroupEnum), Wallet wallet = default(Wallet), OperationValue value = default(OperationValue), DateTime? occurredAt = default(DateTime?))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for BaseOperation and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "group" is required (not null)
            if (group == null)
            {
                throw new InvalidDataException("group is a required property for BaseOperation and cannot be null");
            }
            else
            {
                this.Group = group;
            }
            // to ensure "wallet" is required (not null)
            if (wallet == null)
            {
                throw new InvalidDataException("wallet is a required property for BaseOperation and cannot be null");
            }
            else
            {
                this.Wallet = wallet;
            }
            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new InvalidDataException("value is a required property for BaseOperation and cannot be null");
            }
            else
            {
                this.Value = value;
            }
            // to ensure "occurredAt" is required (not null)
            if (occurredAt == null)
            {
                throw new InvalidDataException("occurredAt is a required property for BaseOperation and cannot be null");
            }
            else
            {
                this.OccurredAt = occurredAt;
            }
        }
        
        /// <summary>
        /// Type of the operation.
        /// </summary>
        /// <value>Type of the operation.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }


        /// <summary>
        /// Gets or Sets Wallet
        /// </summary>
        [DataMember(Name="wallet", EmitDefaultValue=false)]
        public Wallet Wallet { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public OperationValue Value { get; set; }

        /// <summary>
        /// Date and time of the operation in ISO 8601 format.
        /// </summary>
        /// <value>Date and time of the operation in ISO 8601 format.</value>
        [DataMember(Name="occurredAt", EmitDefaultValue=false)]
        public DateTime? OccurredAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BaseOperation {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  Wallet: ").Append(Wallet).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  OccurredAt: ").Append(OccurredAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BaseOperation);
        }

        /// <summary>
        /// Returns true if BaseOperation instances are equal
        /// </summary>
        /// <param name="input">Instance of BaseOperation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BaseOperation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Group == input.Group ||
                    (this.Group != null &&
                    this.Group.Equals(input.Group))
                ) && 
                (
                    this.Wallet == input.Wallet ||
                    (this.Wallet != null &&
                    this.Wallet.Equals(input.Wallet))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.OccurredAt == input.OccurredAt ||
                    (this.OccurredAt != null &&
                    this.OccurredAt.Equals(input.OccurredAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Group != null)
                    hashCode = hashCode * 59 + this.Group.GetHashCode();
                if (this.Wallet != null)
                    hashCode = hashCode * 59 + this.Wallet.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.OccurredAt != null)
                    hashCode = hashCode * 59 + this.OccurredAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
