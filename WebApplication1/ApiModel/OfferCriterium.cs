/* 
 * Allegro REST API
 *
 * https://developer.allegro.pl/about
 *
 * OpenAPI spec version: latest
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace WebApplication1.ApiModel
{
    /// <summary>
    /// Contains offers criteria
    /// </summary>
    [DataContract]
        public partial class OfferCriterium :  IEquatable<OfferCriterium>, IValidatableObject
    {
        /// <summary>
        /// Criteria type: CONTAINS_OFFERS
        /// </summary>
        /// <value>Criteria type: CONTAINS_OFFERS</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum OFFERS for value: CONTAINS_OFFERS
            /// </summary>
            [EnumMember(Value = "CONTAINS_OFFERS")]
            OFFERS = 0        }
        /// <summary>
        /// Criteria type: CONTAINS_OFFERS
        /// </summary>
        /// <value>Criteria type: CONTAINS_OFFERS</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OfferCriterium" /> class.
        /// </summary>
        /// <param name="offers">Set of offers.</param>
        /// <param name="type">Criteria type: CONTAINS_OFFERS.</param>
        public OfferCriterium(List<OfferId> offers = default(List<OfferId>), TypeEnum? type = default(TypeEnum?))
        {
            this.Offers = offers;
            this.Type = type;
        }
        
        /// <summary>
        /// Set of offers
        /// </summary>
        /// <value>Set of offers</value>
        [DataMember(Name="offers", EmitDefaultValue=false)]
        public List<OfferId> Offers { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OfferCriterium {\n");
            sb.Append("  Offers: ").Append(Offers).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OfferCriterium);
        }

        /// <summary>
        /// Returns true if OfferCriterium instances are equal
        /// </summary>
        /// <param name="input">Instance of OfferCriterium to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OfferCriterium input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Offers == input.Offers ||
                    this.Offers != null &&
                    input.Offers != null &&
                    this.Offers.SequenceEqual(input.Offers)
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Offers != null)
                    hashCode = hashCode * 59 + this.Offers.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
