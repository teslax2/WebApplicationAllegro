/* 
 * Allegro REST API
 *
 * https://developer.allegro.pl/about
 *
 * OpenAPI spec version: latest
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace WebApplication1.ApiModel
{
    /// <summary>
    /// Detailed information about the refund.
    /// </summary>
    [DataContract]
        public partial class RefundDetails :  IEquatable<RefundDetails>, IValidatableObject
    {
        /// <summary>
        /// Reason for a payment refund.
        /// </summary>
        /// <value>Reason for a payment refund.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ReasonEnum
        {
            /// <summary>
            /// Enum REFUND for value: REFUND
            /// </summary>
            [EnumMember(Value = "REFUND")]
            REFUND = 0,
            /// <summary>
            /// Enum COMPLAINT for value: COMPLAINT
            /// </summary>
            [EnumMember(Value = "COMPLAINT")]
            COMPLAINT = 1,
            /// <summary>
            /// Enum PRODUCTNOTAVAILABLE for value: PRODUCT_NOT_AVAILABLE
            /// </summary>
            [EnumMember(Value = "PRODUCT_NOT_AVAILABLE")]
            PRODUCTNOTAVAILABLE = 2,
            /// <summary>
            /// Enum PAIDVALUETOOLOW for value: PAID_VALUE_TOO_LOW
            /// </summary>
            [EnumMember(Value = "PAID_VALUE_TOO_LOW")]
            PAIDVALUETOOLOW = 3        }
        /// <summary>
        /// Reason for a payment refund.
        /// </summary>
        /// <value>Reason for a payment refund.</value>
        [DataMember(Name="reason", EmitDefaultValue=false)]
        public ReasonEnum Reason { get; set; }
        /// <summary>
        /// Current status of payment refund.
        /// </summary>
        /// <value>Current status of payment refund.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StatusEnum
        {
            /// <summary>
            /// Enum SUCCESS for value: SUCCESS
            /// </summary>
            [EnumMember(Value = "SUCCESS")]
            SUCCESS = 0,
            /// <summary>
            /// Enum CANCELED for value: CANCELED
            /// </summary>
            [EnumMember(Value = "CANCELED")]
            CANCELED = 1,
            /// <summary>
            /// Enum PARTIAL for value: PARTIAL
            /// </summary>
            [EnumMember(Value = "PARTIAL")]
            PARTIAL = 2,
            /// <summary>
            /// Enum INPROGRESS for value: IN_PROGRESS
            /// </summary>
            [EnumMember(Value = "IN_PROGRESS")]
            INPROGRESS = 3,
            /// <summary>
            /// Enum VALIDATEFAILED for value: VALIDATE_FAILED
            /// </summary>
            [EnumMember(Value = "VALIDATE_FAILED")]
            VALIDATEFAILED = 4,
            /// <summary>
            /// Enum NEW for value: NEW
            /// </summary>
            [EnumMember(Value = "NEW")]
            NEW = 5        }
        /// <summary>
        /// Current status of payment refund.
        /// </summary>
        /// <value>Current status of payment refund.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RefundDetails" /> class.
        /// </summary>
        /// <param name="id">The payment refund identifier. (required).</param>
        /// <param name="payment">payment.</param>
        /// <param name="reason">Reason for a payment refund. (required).</param>
        /// <param name="status">Current status of payment refund. (required).</param>
        /// <param name="createdAt">Date and time when the refund was created provided in ISO 8601 format. (required).</param>
        /// <param name="totalValue">totalValue (required).</param>
        /// <param name="lineItems">List of order&#x27;s line items which can be refunded..</param>
        /// <param name="delivery">delivery.</param>
        /// <param name="overpaid">overpaid.</param>
        /// <param name="surcharges">List of surcharges for payment which can be refunded..</param>
        /// <param name="additionalServices">additionalServices.</param>
        public RefundDetails(Guid? id = default(Guid?), RefundPayment payment = default(RefundPayment), ReasonEnum reason = default(ReasonEnum), StatusEnum status = default(StatusEnum), DateTime? createdAt = default(DateTime?), RefundTotalValue totalValue = default(RefundTotalValue), List<RefundLineItem> lineItems = default(List<RefundLineItem>), InitializeRefundDelivery delivery = default(InitializeRefundDelivery), InitializeRefundOverpaid overpaid = default(InitializeRefundOverpaid), List<PaymentsSurcharge> surcharges = default(List<PaymentsSurcharge>), InitializeRefundAdditionalServices additionalServices = default(InitializeRefundAdditionalServices))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for RefundDetails and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "reason" is required (not null)
            if (reason == null)
            {
                throw new InvalidDataException("reason is a required property for RefundDetails and cannot be null");
            }
            else
            {
                this.Reason = reason;
            }
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for RefundDetails and cannot be null");
            }
            else
            {
                this.Status = status;
            }
            // to ensure "createdAt" is required (not null)
            if (createdAt == null)
            {
                throw new InvalidDataException("createdAt is a required property for RefundDetails and cannot be null");
            }
            else
            {
                this.CreatedAt = createdAt;
            }
            // to ensure "totalValue" is required (not null)
            if (totalValue == null)
            {
                throw new InvalidDataException("totalValue is a required property for RefundDetails and cannot be null");
            }
            else
            {
                this.TotalValue = totalValue;
            }
            this.Payment = payment;
            this.LineItems = lineItems;
            this.Delivery = delivery;
            this.Overpaid = overpaid;
            this.Surcharges = surcharges;
            this.AdditionalServices = additionalServices;
        }
        
        /// <summary>
        /// The payment refund identifier.
        /// </summary>
        /// <value>The payment refund identifier.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Gets or Sets Payment
        /// </summary>
        [DataMember(Name="payment", EmitDefaultValue=false)]
        public RefundPayment Payment { get; set; }



        /// <summary>
        /// Date and time when the refund was created provided in ISO 8601 format.
        /// </summary>
        /// <value>Date and time when the refund was created provided in ISO 8601 format.</value>
        [DataMember(Name="createdAt", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets TotalValue
        /// </summary>
        [DataMember(Name="totalValue", EmitDefaultValue=false)]
        public RefundTotalValue TotalValue { get; set; }

        /// <summary>
        /// List of order&#x27;s line items which can be refunded.
        /// </summary>
        /// <value>List of order&#x27;s line items which can be refunded.</value>
        [DataMember(Name="lineItems", EmitDefaultValue=false)]
        public List<RefundLineItem> LineItems { get; set; }

        /// <summary>
        /// Gets or Sets Delivery
        /// </summary>
        [DataMember(Name="delivery", EmitDefaultValue=false)]
        public InitializeRefundDelivery Delivery { get; set; }

        /// <summary>
        /// Gets or Sets Overpaid
        /// </summary>
        [DataMember(Name="overpaid", EmitDefaultValue=false)]
        public InitializeRefundOverpaid Overpaid { get; set; }

        /// <summary>
        /// List of surcharges for payment which can be refunded.
        /// </summary>
        /// <value>List of surcharges for payment which can be refunded.</value>
        [DataMember(Name="surcharges", EmitDefaultValue=false)]
        public List<PaymentsSurcharge> Surcharges { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalServices
        /// </summary>
        [DataMember(Name="additionalServices", EmitDefaultValue=false)]
        public InitializeRefundAdditionalServices AdditionalServices { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RefundDetails {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Payment: ").Append(Payment).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  TotalValue: ").Append(TotalValue).Append("\n");
            sb.Append("  LineItems: ").Append(LineItems).Append("\n");
            sb.Append("  Delivery: ").Append(Delivery).Append("\n");
            sb.Append("  Overpaid: ").Append(Overpaid).Append("\n");
            sb.Append("  Surcharges: ").Append(Surcharges).Append("\n");
            sb.Append("  AdditionalServices: ").Append(AdditionalServices).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RefundDetails);
        }

        /// <summary>
        /// Returns true if RefundDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of RefundDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RefundDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Payment == input.Payment ||
                    (this.Payment != null &&
                    this.Payment.Equals(input.Payment))
                ) && 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.TotalValue == input.TotalValue ||
                    (this.TotalValue != null &&
                    this.TotalValue.Equals(input.TotalValue))
                ) && 
                (
                    this.LineItems == input.LineItems ||
                    this.LineItems != null &&
                    input.LineItems != null &&
                    this.LineItems.SequenceEqual(input.LineItems)
                ) && 
                (
                    this.Delivery == input.Delivery ||
                    (this.Delivery != null &&
                    this.Delivery.Equals(input.Delivery))
                ) && 
                (
                    this.Overpaid == input.Overpaid ||
                    (this.Overpaid != null &&
                    this.Overpaid.Equals(input.Overpaid))
                ) && 
                (
                    this.Surcharges == input.Surcharges ||
                    this.Surcharges != null &&
                    input.Surcharges != null &&
                    this.Surcharges.SequenceEqual(input.Surcharges)
                ) && 
                (
                    this.AdditionalServices == input.AdditionalServices ||
                    (this.AdditionalServices != null &&
                    this.AdditionalServices.Equals(input.AdditionalServices))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Payment != null)
                    hashCode = hashCode * 59 + this.Payment.GetHashCode();
                if (this.Reason != null)
                    hashCode = hashCode * 59 + this.Reason.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.TotalValue != null)
                    hashCode = hashCode * 59 + this.TotalValue.GetHashCode();
                if (this.LineItems != null)
                    hashCode = hashCode * 59 + this.LineItems.GetHashCode();
                if (this.Delivery != null)
                    hashCode = hashCode * 59 + this.Delivery.GetHashCode();
                if (this.Overpaid != null)
                    hashCode = hashCode * 59 + this.Overpaid.GetHashCode();
                if (this.Surcharges != null)
                    hashCode = hashCode * 59 + this.Surcharges.GetHashCode();
                if (this.AdditionalServices != null)
                    hashCode = hashCode * 59 + this.AdditionalServices.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
