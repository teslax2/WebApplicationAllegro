/* 
 * Allegro REST API
 *
 * https://developer.allegro.pl/about
 *
 * OpenAPI spec version: latest
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace WebApplication1.ApiModel
{
    /// <summary>
    /// CheckoutFormAddWaybillCreated
    /// </summary>
    [DataContract]
        public partial class CheckoutFormAddWaybillCreated :  IEquatable<CheckoutFormAddWaybillCreated>, IValidatableObject
    {
        /// <summary>
        /// Carrier identifier taken from the dictionary below. It’s highly recommended to use an identifier different from OTHER, because its parcel status may be updated automatically. Carrier identifier OTHER is reserved for cases when seller uses a custom carrier or not yet integrated with Allegro.
        /// </summary>
        /// <value>Carrier identifier taken from the dictionary below. It’s highly recommended to use an identifier different from OTHER, because its parcel status may be updated automatically. Carrier identifier OTHER is reserved for cases when seller uses a custom carrier or not yet integrated with Allegro.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum CarrierIdEnum
        {
            /// <summary>
            /// Enum UPS for value: UPS
            /// </summary>
            [EnumMember(Value = "UPS")]
            UPS = 0,
            /// <summary>
            /// Enum INPOST for value: INPOST
            /// </summary>
            [EnumMember(Value = "INPOST")]
            INPOST = 1,
            /// <summary>
            /// Enum DHL for value: DHL
            /// </summary>
            [EnumMember(Value = "DHL")]
            DHL = 2,
            /// <summary>
            /// Enum GLS for value: GLS
            /// </summary>
            [EnumMember(Value = "GLS")]
            GLS = 3,
            /// <summary>
            /// Enum RUCH for value: RUCH
            /// </summary>
            [EnumMember(Value = "RUCH")]
            RUCH = 4,
            /// <summary>
            /// Enum POCZTAPOLSKA for value: POCZTA_POLSKA
            /// </summary>
            [EnumMember(Value = "POCZTA_POLSKA")]
            POCZTAPOLSKA = 5,
            /// <summary>
            /// Enum FEDEX for value: FEDEX
            /// </summary>
            [EnumMember(Value = "FEDEX")]
            FEDEX = 6,
            /// <summary>
            /// Enum DPD for value: DPD
            /// </summary>
            [EnumMember(Value = "DPD")]
            DPD = 7,
            /// <summary>
            /// Enum TNTEXPRESS for value: TNT_EXPRESS
            /// </summary>
            [EnumMember(Value = "TNT_EXPRESS")]
            TNTEXPRESS = 8,
            /// <summary>
            /// Enum DBSCHENKER for value: DB_SCHENKER
            /// </summary>
            [EnumMember(Value = "DB_SCHENKER")]
            DBSCHENKER = 9,
            /// <summary>
            /// Enum RABEN for value: RABEN
            /// </summary>
            [EnumMember(Value = "RABEN")]
            RABEN = 10,
            /// <summary>
            /// Enum GEIS for value: GEIS
            /// </summary>
            [EnumMember(Value = "GEIS")]
            GEIS = 11,
            /// <summary>
            /// Enum DTS for value: DTS
            /// </summary>
            [EnumMember(Value = "DTS")]
            DTS = 12,
            /// <summary>
            /// Enum PEKAES for value: PEKAES
            /// </summary>
            [EnumMember(Value = "PEKAES")]
            PEKAES = 13,
            /// <summary>
            /// Enum PATRON for value: PATRON
            /// </summary>
            [EnumMember(Value = "PATRON")]
            PATRON = 14,
            /// <summary>
            /// Enum XPRESSCOURIERS for value: X_PRESS_COURIERS
            /// </summary>
            [EnumMember(Value = "X_PRESS_COURIERS")]
            XPRESSCOURIERS = 15,
            /// <summary>
            /// Enum RHENUSLOGISTICS for value: RHENUS_LOGISTICS
            /// </summary>
            [EnumMember(Value = "RHENUS_LOGISTICS")]
            RHENUSLOGISTICS = 16,
            /// <summary>
            /// Enum OTHER for value: OTHER
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHER = 17        }
        /// <summary>
        /// Carrier identifier taken from the dictionary below. It’s highly recommended to use an identifier different from OTHER, because its parcel status may be updated automatically. Carrier identifier OTHER is reserved for cases when seller uses a custom carrier or not yet integrated with Allegro.
        /// </summary>
        /// <value>Carrier identifier taken from the dictionary below. It’s highly recommended to use an identifier different from OTHER, because its parcel status may be updated automatically. Carrier identifier OTHER is reserved for cases when seller uses a custom carrier or not yet integrated with Allegro.</value>
        [DataMember(Name="carrierId", EmitDefaultValue=false)]
        public CarrierIdEnum? CarrierId { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutFormAddWaybillCreated" /> class.
        /// </summary>
        /// <param name="id">Identifier of a shipment..</param>
        /// <param name="waybill">Waybill number (parcel tracking number). Cannot be empty and must be no longer than 64 characters. It can contain any word character (equal to [a-zA-Z0-9_]) and special characters: parentheses and hyphen-minus..</param>
        /// <param name="carrierId">Carrier identifier taken from the dictionary below. It’s highly recommended to use an identifier different from OTHER, because its parcel status may be updated automatically. Carrier identifier OTHER is reserved for cases when seller uses a custom carrier or not yet integrated with Allegro..</param>
        /// <param name="carrierName">Carrier name to be provided only if carrierId is OTHER, otherwise it’s ignored. Must be no longer than 30 characters..</param>
        /// <param name="lineItems">List of order line items. They must be from the order specified in the path parameter. List cannot be empty..</param>
        /// <param name="createdAt">Date and time of the parcel tracking number registration in UTC (ISO8601 format)..</param>

        
        /// <summary>
        /// Identifier of a shipment.
        /// </summary>
        /// <value>Identifier of a shipment.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Waybill number (parcel tracking number). Cannot be empty and must be no longer than 64 characters. It can contain any word character (equal to [a-zA-Z0-9_]) and special characters: parentheses and hyphen-minus.
        /// </summary>
        /// <value>Waybill number (parcel tracking number). Cannot be empty and must be no longer than 64 characters. It can contain any word character (equal to [a-zA-Z0-9_]) and special characters: parentheses and hyphen-minus.</value>
        [DataMember(Name="waybill", EmitDefaultValue=false)]
        public string Waybill { get; set; }


        /// <summary>
        /// Carrier name to be provided only if carrierId is OTHER, otherwise it’s ignored. Must be no longer than 30 characters.
        /// </summary>
        /// <value>Carrier name to be provided only if carrierId is OTHER, otherwise it’s ignored. Must be no longer than 30 characters.</value>
        [DataMember(Name="carrierName", EmitDefaultValue=false)]
        public string CarrierName { get; set; }

        /// <summary>
        /// List of order line items. They must be from the order specified in the path parameter. List cannot be empty.
        /// </summary>
        /// <value>List of order line items. They must be from the order specified in the path parameter. List cannot be empty.</value>
        [DataMember(Name="lineItems", EmitDefaultValue=false)]
        public List<CheckoutFormLineItem> LineItems { get; set; }

        /// <summary>
        /// Date and time of the parcel tracking number registration in UTC (ISO8601 format).
        /// </summary>
        /// <value>Date and time of the parcel tracking number registration in UTC (ISO8601 format).</value>
        [DataMember(Name="createdAt", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CheckoutFormAddWaybillCreated {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Waybill: ").Append(Waybill).Append("\n");
            sb.Append("  CarrierId: ").Append(CarrierId).Append("\n");
            sb.Append("  CarrierName: ").Append(CarrierName).Append("\n");
            sb.Append("  LineItems: ").Append(LineItems).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CheckoutFormAddWaybillCreated);
        }

        /// <summary>
        /// Returns true if CheckoutFormAddWaybillCreated instances are equal
        /// </summary>
        /// <param name="input">Instance of CheckoutFormAddWaybillCreated to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CheckoutFormAddWaybillCreated input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Waybill == input.Waybill ||
                    (this.Waybill != null &&
                    this.Waybill.Equals(input.Waybill))
                ) && 
                (
                    this.CarrierId == input.CarrierId ||
                    (this.CarrierId != null &&
                    this.CarrierId.Equals(input.CarrierId))
                ) && 
                (
                    this.CarrierName == input.CarrierName ||
                    (this.CarrierName != null &&
                    this.CarrierName.Equals(input.CarrierName))
                ) && 
                (
                    this.LineItems == input.LineItems ||
                    this.LineItems != null &&
                    input.LineItems != null &&
                    this.LineItems.SequenceEqual(input.LineItems)
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Waybill != null)
                    hashCode = hashCode * 59 + this.Waybill.GetHashCode();
                if (this.CarrierId != null)
                    hashCode = hashCode * 59 + this.CarrierId.GetHashCode();
                if (this.CarrierName != null)
                    hashCode = hashCode * 59 + this.CarrierName.GetHashCode();
                if (this.LineItems != null)
                    hashCode = hashCode * 59 + this.LineItems.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
