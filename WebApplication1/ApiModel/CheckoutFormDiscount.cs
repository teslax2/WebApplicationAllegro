/* 
 * Allegro REST API
 *
 * https://developer.allegro.pl/about
 *
 * OpenAPI spec version: latest
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace WebApplication1.ApiModel
{
    /// <summary>
    /// CheckoutFormDiscount
    /// </summary>
    [DataContract]
        public partial class CheckoutFormDiscount :  IEquatable<CheckoutFormDiscount>, IValidatableObject
    {
        /// <summary>
        /// Describes type of discount used in checkout form. The types of discounts can be as follows: * &#x60;COUPON&#x60; - coupon was used during payment * &#x60;BUNDLE&#x60; - some of the line items were bought as a bundle * &#x60;MULTIPACK&#x60; - at least one line item was bought with multipack option * &#x60;CROSSMULTIPACK&#x60; - some of line items each from different offers were bought together as multipack 
        /// </summary>
        /// <value>Describes type of discount used in checkout form. The types of discounts can be as follows: * &#x60;COUPON&#x60; - coupon was used during payment * &#x60;BUNDLE&#x60; - some of the line items were bought as a bundle * &#x60;MULTIPACK&#x60; - at least one line item was bought with multipack option * &#x60;CROSSMULTIPACK&#x60; - some of line items each from different offers were bought together as multipack </value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum COUPON for value: COUPON
            /// </summary>
            [EnumMember(Value = "COUPON")]
            COUPON = 0,
            /// <summary>
            /// Enum BUNDLE for value: BUNDLE
            /// </summary>
            [EnumMember(Value = "BUNDLE")]
            BUNDLE = 1,
            /// <summary>
            /// Enum MULTIPACK for value: MULTIPACK
            /// </summary>
            [EnumMember(Value = "MULTIPACK")]
            MULTIPACK = 2,
            /// <summary>
            /// Enum CROSSMULTIPACK for value: CROSSMULTIPACK
            /// </summary>
            [EnumMember(Value = "CROSSMULTIPACK")]
            CROSSMULTIPACK = 3        }
        /// <summary>
        /// Describes type of discount used in checkout form. The types of discounts can be as follows: * &#x60;COUPON&#x60; - coupon was used during payment * &#x60;BUNDLE&#x60; - some of the line items were bought as a bundle * &#x60;MULTIPACK&#x60; - at least one line item was bought with multipack option * &#x60;CROSSMULTIPACK&#x60; - some of line items each from different offers were bought together as multipack 
        /// </summary>
        /// <value>Describes type of discount used in checkout form. The types of discounts can be as follows: * &#x60;COUPON&#x60; - coupon was used during payment * &#x60;BUNDLE&#x60; - some of the line items were bought as a bundle * &#x60;MULTIPACK&#x60; - at least one line item was bought with multipack option * &#x60;CROSSMULTIPACK&#x60; - some of line items each from different offers were bought together as multipack </value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutFormDiscount" /> class.
        /// </summary>
        /// <param name="type">Describes type of discount used in checkout form. The types of discounts can be as follows: * &#x60;COUPON&#x60; - coupon was used during payment * &#x60;BUNDLE&#x60; - some of the line items were bought as a bundle * &#x60;MULTIPACK&#x60; - at least one line item was bought with multipack option * &#x60;CROSSMULTIPACK&#x60; - some of line items each from different offers were bought together as multipack  (required).</param>
        public CheckoutFormDiscount(TypeEnum type = default(TypeEnum))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for CheckoutFormDiscount and cannot be null");
            }
            else
            {
                this.Type = type;
            }
        }
        

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CheckoutFormDiscount {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CheckoutFormDiscount);
        }

        /// <summary>
        /// Returns true if CheckoutFormDiscount instances are equal
        /// </summary>
        /// <param name="input">Instance of CheckoutFormDiscount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CheckoutFormDiscount input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
