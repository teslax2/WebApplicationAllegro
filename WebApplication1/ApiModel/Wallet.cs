/* 
 * Allegro REST API
 *
 * https://developer.allegro.pl/about
 *
 * OpenAPI spec version: latest
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace WebApplication1.ApiModel
{
    /// <summary>
    /// The state of the wallet after the operation.
    /// </summary>
    [DataContract]
        public partial class Wallet :  IEquatable<Wallet>, IValidatableObject
    {
        /// <summary>
        /// The payment operator.
        /// </summary>
        /// <value>The payment operator.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum PaymentOperatorEnum
        {
            /// <summary>
            /// Enum PAYU for value: PAYU
            /// </summary>
            [EnumMember(Value = "PAYU")]
            PAYU = 0,
            /// <summary>
            /// Enum P24 for value: P24
            /// </summary>
            [EnumMember(Value = "P24")]
            P24 = 1        }
        /// <summary>
        /// The payment operator.
        /// </summary>
        /// <value>The payment operator.</value>
        [DataMember(Name="paymentOperator", EmitDefaultValue=false)]
        public PaymentOperatorEnum PaymentOperator { get; set; }
        /// <summary>
        /// The type of the wallet.
        /// </summary>
        /// <value>The type of the wallet.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum AVAILABLE for value: AVAILABLE
            /// </summary>
            [EnumMember(Value = "AVAILABLE")]
            AVAILABLE = 0,
            /// <summary>
            /// Enum WAITING for value: WAITING
            /// </summary>
            [EnumMember(Value = "WAITING")]
            WAITING = 1        }
        /// <summary>
        /// The type of the wallet.
        /// </summary>
        /// <value>The type of the wallet.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Wallet" /> class.
        /// </summary>
        /// <param name="paymentOperator">The payment operator. (required).</param>
        /// <param name="type">The type of the wallet. (required).</param>
        /// <param name="balance">balance (required).</param>
        public Wallet(PaymentOperatorEnum paymentOperator = default(PaymentOperatorEnum), TypeEnum type = default(TypeEnum), WalletBalance balance = default(WalletBalance))
        {
            // to ensure "paymentOperator" is required (not null)
            if (paymentOperator == null)
            {
                throw new InvalidDataException("paymentOperator is a required property for Wallet and cannot be null");
            }
            else
            {
                this.PaymentOperator = paymentOperator;
            }
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for Wallet and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "balance" is required (not null)
            if (balance == null)
            {
                throw new InvalidDataException("balance is a required property for Wallet and cannot be null");
            }
            else
            {
                this.Balance = balance;
            }
        }
        


        /// <summary>
        /// Gets or Sets Balance
        /// </summary>
        [DataMember(Name="balance", EmitDefaultValue=false)]
        public WalletBalance Balance { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Wallet {\n");
            sb.Append("  PaymentOperator: ").Append(PaymentOperator).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Wallet);
        }

        /// <summary>
        /// Returns true if Wallet instances are equal
        /// </summary>
        /// <param name="input">Instance of Wallet to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Wallet input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PaymentOperator == input.PaymentOperator ||
                    (this.PaymentOperator != null &&
                    this.PaymentOperator.Equals(input.PaymentOperator))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Balance == input.Balance ||
                    (this.Balance != null &&
                    this.Balance.Equals(input.Balance))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PaymentOperator != null)
                    hashCode = hashCode * 59 + this.PaymentOperator.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Balance != null)
                    hashCode = hashCode * 59 + this.Balance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
