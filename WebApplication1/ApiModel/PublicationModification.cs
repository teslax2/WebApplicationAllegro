/* 
 * Allegro REST API
 *
 * https://developer.allegro.pl/about
 *
 * OpenAPI spec version: latest
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace WebApplication1.ApiModel
{
    /// <summary>
    /// Contains publication&#x27;s fields to change
    /// </summary>
    [DataContract]
        public partial class PublicationModification :  IEquatable<PublicationModification>, IValidatableObject
    {
        /// <summary>
        /// Action to perform
        /// </summary>
        /// <value>Action to perform</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ActionEnum
        {
            /// <summary>
            /// Enum ACTIVATE for value: ACTIVATE
            /// </summary>
            [EnumMember(Value = "ACTIVATE")]
            ACTIVATE = 0,
            /// <summary>
            /// Enum END for value: END
            /// </summary>
            [EnumMember(Value = "END")]
            END = 1        }
        /// <summary>
        /// Action to perform
        /// </summary>
        /// <value>Action to perform</value>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public ActionEnum? Action { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PublicationModification" /> class.
        /// </summary>
        /// <param name="action">Action to perform.</param>
        /// <param name="scheduledFor">Date and time for scheduling ACTIVATE action, will be ignored for another actions.</param>
        public PublicationModification(ActionEnum? action = default(ActionEnum?), DateTime? scheduledFor = default(DateTime?))
        {
            this.Action = action;
            this.ScheduledFor = scheduledFor;
        }
        

        /// <summary>
        /// Date and time for scheduling ACTIVATE action, will be ignored for another actions
        /// </summary>
        /// <value>Date and time for scheduling ACTIVATE action, will be ignored for another actions</value>
        [DataMember(Name="scheduledFor", EmitDefaultValue=false)]
        public DateTime? ScheduledFor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PublicationModification {\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  ScheduledFor: ").Append(ScheduledFor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PublicationModification);
        }

        /// <summary>
        /// Returns true if PublicationModification instances are equal
        /// </summary>
        /// <param name="input">Instance of PublicationModification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PublicationModification input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                ) && 
                (
                    this.ScheduledFor == input.ScheduledFor ||
                    (this.ScheduledFor != null &&
                    this.ScheduledFor.Equals(input.ScheduledFor))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Action != null)
                    hashCode = hashCode * 59 + this.Action.GetHashCode();
                if (this.ScheduledFor != null)
                    hashCode = hashCode * 59 + this.ScheduledFor.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
