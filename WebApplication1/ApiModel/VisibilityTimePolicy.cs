/* 
 * Allegro REST API
 *
 * https://developer.allegro.pl/about
 *
 * OpenAPI spec version: latest
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace WebApplication1.ApiModel
{
    /// <summary>
    /// Time period when the campaign is visible in &lt;a href&#x3D;\&quot;https://allegro.pl/moje-allegro/sprzedaz/moje-oferty\&quot; target&#x3D;\&quot;_blank\&quot;&gt;My Allegro&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://ms.allegro.pl/seller-offers/\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Sales Manager (Menedżer sprzedaży)&lt;/a&gt; (it is not equal to the time period when badges are displayed on the list of offers or on the offer page).
    /// </summary>
    [DataContract]
        public partial class VisibilityTimePolicy :  IEquatable<VisibilityTimePolicy>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum ALWAYS for value: ALWAYS
            /// </summary>
            [EnumMember(Value = "ALWAYS")]
            ALWAYS = 0,
            /// <summary>
            /// Enum SINCE for value: SINCE
            /// </summary>
            [EnumMember(Value = "SINCE")]
            SINCE = 1,
            /// <summary>
            /// Enum WITHIN for value: WITHIN
            /// </summary>
            [EnumMember(Value = "WITHIN")]
            WITHIN = 2,
            /// <summary>
            /// Enum UNTIL for value: UNTIL
            /// </summary>
            [EnumMember(Value = "UNTIL")]
            UNTIL = 3,
            /// <summary>
            /// Enum NEVER for value: NEVER
            /// </summary>
            [EnumMember(Value = "NEVER")]
            NEVER = 4        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="VisibilityTimePolicy" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="from">Provided in [ISO 8601 format](link: https://en.wikipedia.org/wiki/ISO_8601)..</param>
        /// <param name="to">Provided in [ISO 8601 format](link: https://en.wikipedia.org/wiki/ISO_8601)..</param>
        public VisibilityTimePolicy(TypeEnum type = default(TypeEnum), string from = default(string), string to = default(string))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for VisibilityTimePolicy and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.From = from;
            this.To = to;
        }
        

        /// <summary>
        /// Provided in [ISO 8601 format](link: https://en.wikipedia.org/wiki/ISO_8601).
        /// </summary>
        /// <value>Provided in [ISO 8601 format](link: https://en.wikipedia.org/wiki/ISO_8601).</value>
        [DataMember(Name="from", EmitDefaultValue=false)]
        public string From { get; set; }

        /// <summary>
        /// Provided in [ISO 8601 format](link: https://en.wikipedia.org/wiki/ISO_8601).
        /// </summary>
        /// <value>Provided in [ISO 8601 format](link: https://en.wikipedia.org/wiki/ISO_8601).</value>
        [DataMember(Name="to", EmitDefaultValue=false)]
        public string To { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VisibilityTimePolicy {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VisibilityTimePolicy);
        }

        /// <summary>
        /// Returns true if VisibilityTimePolicy instances are equal
        /// </summary>
        /// <param name="input">Instance of VisibilityTimePolicy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VisibilityTimePolicy input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
