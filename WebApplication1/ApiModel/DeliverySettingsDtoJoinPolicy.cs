/* 
 * Allegro REST API
 *
 * https://developer.allegro.pl/about
 *
 * OpenAPI spec version: latest
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace WebApplication1.ApiModel
{
    /// <summary>
    /// Policy of calculating delivery costs.
    /// </summary>
    [DataContract]
        public partial class DeliverySettingsDtoJoinPolicy :  IEquatable<DeliverySettingsDtoJoinPolicy>, IValidatableObject
    {
        /// <summary>
        /// Strategy used to calculate delivery cost for items from offers with different delivery costs. The possible values:   * &#x60;MAX&#x60; - The buyer will pay for the most expensive delivery   * &#x60;MIN&#x60; - The buyer will pay for the cheapest delivery   * &#x60;SUM&#x60; - Items will be sent in separate parcels and delivery costs will be sum of delivery costs for each item.
        /// </summary>
        /// <value>Strategy used to calculate delivery cost for items from offers with different delivery costs. The possible values:   * &#x60;MAX&#x60; - The buyer will pay for the most expensive delivery   * &#x60;MIN&#x60; - The buyer will pay for the cheapest delivery   * &#x60;SUM&#x60; - Items will be sent in separate parcels and delivery costs will be sum of delivery costs for each item.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StrategyEnum
        {
            /// <summary>
            /// Enum MIN for value: MIN
            /// </summary>
            [EnumMember(Value = "MIN")]
            MIN = 0,
            /// <summary>
            /// Enum MAX for value: MAX
            /// </summary>
            [EnumMember(Value = "MAX")]
            MAX = 1,
            /// <summary>
            /// Enum SUM for value: SUM
            /// </summary>
            [EnumMember(Value = "SUM")]
            SUM = 2        }
        /// <summary>
        /// Strategy used to calculate delivery cost for items from offers with different delivery costs. The possible values:   * &#x60;MAX&#x60; - The buyer will pay for the most expensive delivery   * &#x60;MIN&#x60; - The buyer will pay for the cheapest delivery   * &#x60;SUM&#x60; - Items will be sent in separate parcels and delivery costs will be sum of delivery costs for each item.
        /// </summary>
        /// <value>Strategy used to calculate delivery cost for items from offers with different delivery costs. The possible values:   * &#x60;MAX&#x60; - The buyer will pay for the most expensive delivery   * &#x60;MIN&#x60; - The buyer will pay for the cheapest delivery   * &#x60;SUM&#x60; - Items will be sent in separate parcels and delivery costs will be sum of delivery costs for each item.</value>
        [DataMember(Name="strategy", EmitDefaultValue=false)]
        public StrategyEnum? Strategy { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DeliverySettingsDtoJoinPolicy" /> class.
        /// </summary>
        /// <param name="strategy">Strategy used to calculate delivery cost for items from offers with different delivery costs. The possible values:   * &#x60;MAX&#x60; - The buyer will pay for the most expensive delivery   * &#x60;MIN&#x60; - The buyer will pay for the cheapest delivery   * &#x60;SUM&#x60; - Items will be sent in separate parcels and delivery costs will be sum of delivery costs for each item..</param>
        public DeliverySettingsDtoJoinPolicy(StrategyEnum? strategy = default(StrategyEnum?))
        {
            this.Strategy = strategy;
        }
        

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeliverySettingsDtoJoinPolicy {\n");
            sb.Append("  Strategy: ").Append(Strategy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeliverySettingsDtoJoinPolicy);
        }

        /// <summary>
        /// Returns true if DeliverySettingsDtoJoinPolicy instances are equal
        /// </summary>
        /// <param name="input">Instance of DeliverySettingsDtoJoinPolicy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeliverySettingsDtoJoinPolicy input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Strategy == input.Strategy ||
                    (this.Strategy != null &&
                    this.Strategy.Equals(input.Strategy))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Strategy != null)
                    hashCode = hashCode * 59 + this.Strategy.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
